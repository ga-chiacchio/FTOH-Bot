room.onGameTick = function() {
    checkIfTrolling();
    checkPlayerLaps();
    checkAfkPlayers();
    endRaceSession();
    logPlayerSpeed();

    var players = room.getPlayerList().filter(p => room.getPlayerDiscProperties(p.id) != null);
    
    players.forEach(player => {
        let discProps = room.getPlayerDiscProperties(player.id);
        if (discProps) {
            let speedLimit = raceSpeed; // Aplicar restricciones solo si hay VSC o Yellow Flag

            if (raceSpeed !== 1.0) { // Si hay VSC o Yellow Flag, reducir velocidad
                room.setPlayerDiscProperties(player.id, {
                    xspeed: discProps.xspeed * speedLimit,
                    yspeed: discProps.yspeed * speedLimit
                });
            }
        }
    });

    if (tireSystemEnabled) {
        players.forEach(player => {
            if (!playerTires[player.id]) return;

            let discProps = room.getPlayerDiscProperties(player.id);
            if (!discProps) return;

            let velocidad = Math.hypot(discProps.xspeed, discProps.yspeed);

            if (velocidad > 0.1) { // Solo desgastar si el jugador se está moviendo
                let tire = playerTires[player.id];
                let desgasteNormal = { B: 15 * 60, M: 18 * 60, D: 22 * 60 };
                tire.remainingTime -= (1 / 60);

                if (tire.remainingTime <= 0) {
                    tire.remainingTime = 0;
                    room.sendAnnouncement(
                        `❌ ¡Neumáticos ${tireData[tire.type].name} completamente desgastados!`,
                        player.id, 0xFF0000, "bold", 2
                    );
                }

                let vidaRestante = (tire.remainingTime / desgasteNormal[tire.type]) * 100;
                let nuevaGravedad = calcularGravedad(tire.type, vidaRestante);
                let nuevaFriccion = calcularFriccion(tire.type, vidaRestante);
                let velocidadMaxima = calcularVelocidadMaxima(tire.type, vidaRestante);

                room.setPlayerDiscProperties(player.id, {
                    gravity: nuevaGravedad,
                    xspeed: discProps.xspeed * velocidadMaxima,
                    yspeed: discProps.yspeed * velocidadMaxima
                });
            }
        });
    }
};

function calcularGravedad(tipoNeumatico, vidaRestante) {
    let gravedadPorEtapa = {
        B: [0.14, 0.14, 0.12, 0.11, 0.10],
        M: [0.13, 0.13, 0.11, 0.10, 0.09],
        D: [0.12, 0.12, 0.10, 0.09, 0.08]
    };
    return seleccionarPorVida(vidaRestante, gravedadPorEtapa[tipoNeumatico]);
}

function calcularFriccion(tipoNeumatico, vidaRestante) {
    let friccionPorEtapa = {
        B: [1.00, 0.98, 1.02, 1.05, 1.08],
        M: [1.02, 1.00, 1.04, 1.07, 1.10],
        D: [1.04, 1.02, 1.06, 1.08, 1.12]
    };
    return seleccionarPorVida(vidaRestante, friccionPorEtapa[tipoNeumatico]);
}

function calcularVelocidadMaxima(tipoNeumatico, vidaRestante) {
    let velocidadPorEtapa = [1.00, 1.00, 0.95, 0.92, 0.90];
    return seleccionarPorVida(vidaRestante, velocidadPorEtapa);
}

function seleccionarPorVida(vidaRestante, valores) {
    if (vidaRestante > 90) return valores[0];
    if (vidaRestante > 80) return valores[1];
    if (vidaRestante > 70) return valores[2];
    if (vidaRestante > 60) return valores[3];
    return valores[4];
}